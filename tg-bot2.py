# –ò–ú–ü–û–†–¢ –ë–ò–ë–õ–ò–û–¢–ï–ö
import telebot
from random import randint
from datetime import datetime
import time
import random
import telebot
import requests
import os
import gdown
import numpy as np
from tensorflow.keras.models import load_model
from PIL import Image, ImageOps
from flask import Flask, request

TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)

app = Flask(name)

@app.route('/')
def index():
    return "Bot is running!"

@app.route(f'/{TOKEN}', methods=['POST'])
def webhook():
    json_str = request.get_data().decode('UTF-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return '', 200

def chat(text):
    try:
        url = "https://api.intelligence.io.solutions/api/v1/chat/completions"
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {os.getenv('API_KEY')}"
        }
        data = {
            "model": "deepseek-ai/DeepSeek-R1-0528",
            "messages": [
                {"role": "system", "content": text}
            ]
        }
        response = requests.post(url, headers=headers, json=data)
        data = response.json()
        if 'choices' in data and data['choices']:
            content = data['choices'][0]['message']['content']
            if '</think>' in content:
                return content.split('</think>', 1)[1]
            return content
        else:
            return f"–û—à–∏–±–∫–∞ API: {data}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}"

def cat_dog(photo):
    try:
        np.set_printoptions(suppress=True)
        model_path = "cat_dog_model.h5"
        if not os.path.exists(model_path):
            url = "https://drive.google.com/uc?export=download&id=1
            MlJQtn9O - FQAwdtqyzc92ZG1KhRAT8qT&confirm=t"
            gdown.download(url, model_path, quiet=False)
        model = load_model(model_path, compile=False)
        image = Image.open(photo).convert("RGB")
        size = (150, 150)
        image = ImageOps.fit(image, size, method=Image.Resampling.LANCZOS)
        image_array = np.asarray(image).astype(np.float32) / 255.0
        image_array = np.expand_dims(image_array, axis=0)
        prediction = model.predict(image_array)
        confidence = float(prediction[0])
        if confidence < 0.5:
            return f"–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ—Ç (—Ç–æ—á–Ω–æ—Å—Ç—å: {confidence:.2f})"
        else:
            return f"–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–æ–±–∞–∫–∞ (—Ç–æ—á–Ω–æ—Å—Ç—å: {confidence:.2f})"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: {e}"


def ident_number(message):
    load_photo(message, "Number.jpg")
    answer_number = number_identification("Number.jpg")
    bot.send_message(message.chat.id, f"–¶–∏—Ñ—Ä–∞ –Ω–∞ —Ñ–æ—Ç–æ: {answer_number}")

def ident_cat_dog(message):
    load_photo(message, "cat_dog.jpg")
    answer = cat_dog("cat_dog.jpg")
    bot.send_message(message.chat.id, answer)


def load_photo(message, name):
    photo = message.photo[-1]
    file_info = bot.get_file(photo.file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    save_path = name
    with open(save_path, 'wb') as new_file:
        new_file.write(downloaded_file)

@bot.message_handler(commands=['start'])
def start(message):
    try:
        keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = telebot.types.KeyboardButton(text="–ò–≥—Ä–∞ –≤ –∫—É–±–∏–∫")
        button2 = telebot.types.KeyboardButton(text="–ò–≥—Ä–æ–≤–æ–π –∞–≤—Ç–æ–º–∞—Ç")
        button3 = telebot.types.KeyboardButton(text="–®–∞—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
        button4 = telebot.types.KeyboardButton(text="–ü–æ–ª–µ —á—É–¥–µ—Å")
        button5 = telebot.types.KeyboardButton(text="–ö—Ç–æ —Ö–æ—á–µ—Ç —Å—Ç–∞—Ç—å –º–∏–ª–ª–∏–æ–Ω–µ—Ä–æ–º")
        button6 = telebot.types.KeyboardButton(text="–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ü–∏—Ñ—Ä")
        button7 = telebot.types.KeyboardButton(text="–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö")
        keyboard.add(button6, button7)
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –ë–æ—Ç", reply_markup=keyboard)
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['date'])
def date(message):
    try:
        bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å: "+str(datetime.today()))
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    try:
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        temp_path = "temp.jpg"
        with open(temp_path, 'wb') as new_file:
            new_file.write(downloaded_file)
        result = cat_dog(temp_path)
        bot.send_message(message.chat.id, result)
        os.remove(temp_path)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")

@bot.message_handler(content_types=['text'])
def handle_text(message):
    try:
        text = message.text
        if text == "–ò–≥—Ä–∞ –≤ –∫—É–±–∏–∫":
            keyboard2 = telebot.types.InlineKeyboardMarkup(row_width=3)
            button1 = telebot.types.InlineKeyboardButton("1", callback_data='1')
            button2 = telebot.types.InlineKeyboardButton("2", callback_data='2')
            button3 = telebot.types.InlineKeyboardButton("3", callback_data='3')
            button4 = telebot.types.InlineKeyboardButton("4", callback_data='4')
            button5 = telebot.types.InlineKeyboardButton("5", callback_data='5')
            button6 = telebot.types.InlineKeyboardButton("6", callback_data='6')
            keyboard2.add(button1, button2, button3, button4, button5, button6)
            bot.send_message(message.chat.id, "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –Ω–∞ –∫—É–±–∏–∫–µ", reply_markup=keyboard2)
        elif text == "–ò–≥—Ä–æ–≤–æ–π –∞–≤—Ç–æ–º–∞—Ç":
            value = bot.send_dice(message.chat.id, emoji='üé∞').dice.value
            if value in (1, 22, 43, 16, 32, 48):
                bot.send_message(message.chat.id, "–ü–æ–±–µ–¥–∞!")
            elif value == 64:
                bot.send_message(message.chat.id, "Jackpot!")
            else:
                bot.send_message(message.chat.id, "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
        elif text == "–®–∞—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π":
            send = bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –º–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. –ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å")
            bot.register_next_step_handler(send, ballAnswer)





def ball_answer(message):
    text = message.text
    answers_list = ["–î–∞", "–ù–µ—Ç", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "–°–∫–æ—Ä–µ–µ –¥–∞, —á–µ–º –Ω–µ—Ç", "–°–∫–æ—Ä–µ–µ –Ω–µ—Ç, —á–µ–º –¥–∞"]
    answers_list = random.choice(answers_list)
    if text[-1] == '?':
        bot.send_message(message.chat.id, "–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
        time.sleep(3)
        bot.send_message(message.chat.id, "–ó–∞–≥–ª—è–¥—ã–≤–∞—é –≤ –±—É–¥—É—â–µ–µ")
        bot.delete_message(message.chat.id, message.id+1)
        time.sleep(3)
        bot.send_message(message.chat.id, "–¢–≤–æ–π –æ—Ç–≤–µ—Ç: " + answers_list)
        bot.delete_message(message.chat.id, message.id+2)
    else:
        bot.send_message(message.chat.id, "–¢–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–æ–ø—Ä–æ—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
        send = bot.send_message(message.chat.id, "–ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å")
        bot.register_next_step_handler(send, ballAnswer)


# –í–´–ü–û–õ–ù–Ø–ï–¢–°–Ø, –ö–û–ì–î–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ù–ê–ñ–ò–ú–ê–ï–¢ –ù–ê –û–î–ù–£ –ò–ó –ö–ù–û–ü–û–ö –ö–õ–ê–í–ò–ê–¢–£–†–´ InlineKeyboard
@bot.callback_query_handler(func=lambda call: call.data in ('1', '2', '3', '4', '5', '6'))
def answer(call):
    value = bot.send_dice(call.message.chat.id, emoji='').dice.value
    if str(value) == call.data:
        bot.send_message(call.message.chat.id, "–ü–æ–±–µ–¥–∞!")
    else:
        bot.send_message(call.message.chat.id, "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")



if __name__ == "__main__":
    server_url = os.getenv("SERVER_URL")
    if server_url and TOKEN:
        webhook_url = f"{server_url}/{TOKEN}"
        set_webhook_url = f"https://api.telegram.org/bot{TOKEN}/setWebhook?url={webhook_url}"
        try:
            r = requests.get(set_webhook_url)
            print("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", r.text)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook:", e)
        app.run(host='0.0.0.0', port=8080)
    else:
        print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ pooling")
        bot.remove_webhook()
        bot.polling(none_stop=True)